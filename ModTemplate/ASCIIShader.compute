// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> cameraTexture;
RWTexture2D<float4> asciiTexture;
float scaleFactor;

static int font8x8_basic[][8] = {
    { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!) 0
    { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (") 1
    { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#) 2 
    { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($) 3
    { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%) 4
    { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&) 5
    { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (') 6
    { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (() 7
    { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ()) 8
    { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*) 9 
    { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+) 10
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,) 11
    { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-) 12
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.) 13 
    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/) 14
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:) 15
    { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (;) 16
    { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<) 17
    { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=) 18
    { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>) 19
    { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?) 20
    { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@) 21
    { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([) 22
    { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\) 23 
    { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (]) 24
    { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^) 25
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_) 26
    { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0060 (`) 27
    { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+007B ({) 28
    { 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // U+007C (|) 29
    { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+007D (}) 30
    { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+007E (~) 31
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}    // U+007F     32
};

int GetCharacterFromBrightness(float brightness)
{
    if(brightness < 0.05)
    {
        return 32;
    } 
    if(brightness < 0.10)
    {
        return 27;
    }
    if(brightness < 0.15)
    {
        return 6;
    }
    if(brightness < 0.20)
    {
        return 12;
    } 
    if(brightness < 0.25)
    {
        return 13;
    }
    if(brightness < 0.30)
    {
        return 11;
    }
    if(brightness < 0.35)
    {
        return 1;
    }
    if(brightness < 0.40)
    {
        return 31;
    }
    if(brightness < 0.45)
    {
        return 25;
    }
    if(brightness < 0.50)
    {
        return 23;
    }
    if(brightness < 0.55)
    {
        return 17;
    }
    if(brightness < 0.60)
    {
        return 30;
    }
     if(brightness < 0.65)
    {
        return 24;
    }
    if(brightness < 0.70)
    {
        return 17;
    }
    if(brightness < 0.75)
    {
        return 20;
    }
    if(brightness < 0.80)
    {
        return 4;
    }
   if(brightness < 0.85)
    {
        return 5;
    }
    if(brightness < 0.90)
    {
        return 3;
    }
    if(brightness < 0.95)
    {
        return 2;
    }
    if(brightness < 1)
    {
        return 21;
    }
    return 32;
}

void WriteAsciiCharacter(float2 position, float brightness, float3 colour)
{   

    for(uint x = 0; x < 8 * scaleFactor; x++)
    {
        for (uint y = 0; y < 8 * scaleFactor; y++)
        {
            
           int pixelPosition = ((x * 8)/ (8 * scaleFactor));
           int bitPosition = ((y * 8)/ (8 * scaleFactor));

           bool set = ((font8x8_basic[brightness][pixelPosition] >> bitPosition) & 1) == 1;
           if(set)
           {
              asciiTexture[float2(position.x + x, position.y + y)] = float4(colour,0);
           }
           else
           {
              asciiTexture[float2(position.x + x, position.y + y)] = float4(colour * 0.1,0);
           }
        }
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{    
    if(scaleFactor <= 0){return;}

    float brightness = (cameraTexture[id.xy* 8 *scaleFactor].x + cameraTexture[id.xy* 8 *scaleFactor].y + cameraTexture[id.xy*8 * scaleFactor].z) /3;
    float3 colour = cameraTexture[id.xy* 8 *scaleFactor].xyz;
    WriteAsciiCharacter(id.xy * 8 * scaleFactor, GetCharacterFromBrightness(brightness), colour);   
}

